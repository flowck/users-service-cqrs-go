// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for FindPetsByTagsParamsStatus.
const (
	Blocked   FindPetsByTagsParamsStatus = "blocked"
	Unblocked FindPetsByTagsParamsStatus = "unblocked"
)

// GenericResponse defines model for GenericResponse.
type GenericResponse struct {
	Message *string `json:"message,omitempty"`
}

// User defines model for User.
type User struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"firstName,omitempty"`
	Id        *openapi_types.UUID  `json:"id,omitempty"`
	LastName  *string              `json:"lastName,omitempty"`

	// Status User Status
	Status *string `json:"status,omitempty"`
}

// UserList defines model for UserList.
type UserList = []User

// FindPetsByTagsParams defines parameters for FindPetsByTags.
type FindPetsByTagsParams struct {
	// Status User status "blocked" / "unblocked"
	Status FindPetsByTagsParamsStatus `form:"status" json:"status"`
}

// FindPetsByTagsParamsStatus defines parameters for FindPetsByTags.
type FindPetsByTagsParamsStatus string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Finds Pets by tags
	// (GET /users)
	FindPetsByTags(ctx echo.Context, params FindPetsByTagsParams) error
	// Finds Pets by status
	// (POST /users/{id}/block)
	BlockUser(ctx echo.Context, id openapi_types.UUID) error
	// Update an existing pet
	// (POST /users/{id}/unblock)
	UnblockUser(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPetsByTags converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetsByTags(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByTagsParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetsByTags(ctx, params)
	return err
}

// BlockUser converts echo context to params.
func (w *ServerInterfaceWrapper) BlockUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BlockUser(ctx, id)
	return err
}

// UnblockUser converts echo context to params.
func (w *ServerInterfaceWrapper) UnblockUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnblockUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.FindPetsByTags)
	router.POST(baseURL+"/users/:id/block", wrapper.BlockUser)
	router.POST(baseURL+"/users/:id/unblock", wrapper.UnblockUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVS3PbNhD+Kxi0R4qUIztpeUoTux114jS14l5sH1bgkoRDPAwsZWs8+u8dgJQsWYwd",
	"tzPJhaLAfeF7APdcGGWNRk2e5/fcixoVxNc/UKOT4gy9NdpjWLLOWHQkMQYo9B6q+IGWFnnOPTmpK75a",
	"JesVM79GQXyV8HOPbr8GKpBNfLkDZZuQcm1q/Taup8IonvDSOAXE8z44edwt4aV0nj6Cwt1KVGPsOpAh",
	"i93QN29elxM8gtH8SIjRIeLhCMa/HIxgcnCEr/EQjn492B6lbWUxVLeBoUH+NLUeivYE1EYcCvTCSUvS",
	"aJ5HrNis+5hs1Zk3RnzBgcZfA/yD9BTKS0IV+/zssOQ5/yl7oD3rOc8iVg+VwDlY8lWojXeETkNzbMTA",
	"tDWR9XmWVZLqdh5Iy8rG3IovWevR+ZFHt5ACR+LG+VFlsrOT345PT1IV9tG65uUVIoG6NGEUYTSBoC0t",
	"BTUoqU0qatAVaPm22ohplTya/f3fZzNWoDJMBowVaoLwiZmSAev7MjJMgYYKWZwn5QlvpMDeFTryzU+n",
	"n//rhrIP0/cnH2cRk0AAOuX/KmddUF8uzzJ/C1WFLpUmiyFZEIKkKI1Anl9nJHyBznc7HKfj9CBUNRY1",
	"WMlzPknH6YQn3ALVkc9uqvBWIe0TfNo2JG2DjKDyTIBmc2TWmYUssGC3kmomjFIBLwsOCAvWCdOn7NzH",
	"tIMkPF/F54SVxjFCT1JXActwIETUpwXP+e9SF5+Q/LvlZ6h8HNOBQooTXgxapfMRu1wb5JKzjF3yVm/+",
	"RxvZxhTIc3ItBgHxnN+06JY8WVPo15ZzeNNKh8U6uLNIFJluFc8vtqy46cKvvs2rV6F+d6hGzF+Nx2sl",
	"o47wg7WNFBGS7NqHfd5vjfDNZo7uHzT0Loa+FQK9L9uGbagIeYfdYLvBU72ARhaBSLaApsV4+vhWKXDL",
	"nj7PAoFsvoyKCRCEn/yCdzq7Chmd5rJ7WayyiFW8HHapjhwFlT5QFI/dr9PzzAEdsLfGP6XxXktxay8T",
	"+56S34Vt9TfQ/2L8KaIfX9Mv5/d7jbFWzjbCT4pnY8dn5NM7MApokNxzWwAhA83wTsZjh1mk0GJa7LF2",
	"3lXrefseivyR2pgNaGP2rPmnx8y3YSwsutjD/dhPSEwbYqVpdR91tB/1T6jXXbl4J7Bb3hXFMHtDsghp",
	"6BZrsh7u4jzLGiOgqY2nfDIej/nqavVvAAAA//8VXvfU/AoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

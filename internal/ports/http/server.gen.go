// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for GetUsersByStatusParamsStatus.
const (
	Blocked   GetUsersByStatusParamsStatus = "blocked"
	Unblocked GetUsersByStatusParamsStatus = "unblocked"
)

// GenericResponse defines model for GenericResponse.
type GenericResponse struct {
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// User defines model for User.
type User struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"firstName,omitempty"`
	Id        *openapi_types.UUID  `json:"id,omitempty"`
	LastName  *string              `json:"lastName,omitempty"`

	// Status User Status
	Status *string `json:"status,omitempty"`
}

// UserList defines model for UserList.
type UserList = []User

// GetUsersByStatusParams defines parameters for GetUsersByStatus.
type GetUsersByStatusParams struct {
	// Status User status "blocked" / "unblocked"
	Status GetUsersByStatusParamsStatus `form:"status" json:"status"`
}

// GetUsersByStatusParamsStatus defines parameters for GetUsersByStatus.
type GetUsersByStatusParamsStatus string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Finds users by status
	// (GET /users)
	GetUsersByStatus(w http.ResponseWriter, r *http.Request, params GetUsersByStatusParams)
	// Get one user
	// (GET /users/{id})
	GetOneUser(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Finds Pets by status
	// (POST /users/{id}/block)
	BlockUser(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update an existing pet
	// (POST /users/{id}/unblock)
	UnblockUser(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetUsersByStatus operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersByStatusParams

	// ------------- Required query parameter "status" -------------

	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "status"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersByStatus(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOneUser operation middleware
func (siw *ServerInterfaceWrapper) GetOneUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOneUser(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BlockUser operation middleware
func (siw *ServerInterfaceWrapper) BlockUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BlockUser(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnblockUser operation middleware
func (siw *ServerInterfaceWrapper) UnblockUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnblockUser(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsersByStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetOneUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}/block", wrapper.BlockUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}/unblock", wrapper.UnblockUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWzXLbNhB+FQzaIyVIkZ20PKVJXI86cZJadS+xDxC4JOEQPwaWsjUevnsHoChTFh3b",
	"bZP2oqGIxe7i+1nwlgqjrNGg0dP0lnpRguLx8Rg0OClOwVujPYRX1hkLDiXEAAXe8yIu4NoCTalHJ3VB",
	"m4R65Fj73pLUCAU42jRJ98osL0FgiD7z4Pbzg+Kyig83XNkqbLk0pX4d34+FUTShuXGKI003wcl+J7l0",
	"Hj9wBbuZsIRYdWCHzHZDX716mc/gkI+Wh0KMDgAORnzy03TEZ9NDeAkH/PDnab+VupbZUN6KDzXymyn1",
	"UPQdghl44aRFaTRNI1Zk0S4mvTzLyogvMFD4IcDfS48hvURQsc6PDnKa0h/YnSTYRg8sYnWXiTvH17QJ",
	"ueEGwWlevTNioNsS0fqUsUJiWS8DaSyvzLX4wmoPzo88uJUUMBJXzo8Kw06Pfnl3cjRW4Ry1q56fIRKo",
	"cxNaEUYjF9jTUlCDktqMRcl1wbV8XWzF1CT3en/7++mCZKAMkQFjBRp5WCImJ5xs6hI0RHHNCyCxnzFN",
	"aCUFbByjI9/0ZP7H3z0Qez9/e/RhETEJBIBT/mO+aIM26VLG/DUvCnBjaVgMYUEIEqM0Anm+25HQFTjf",
	"nnAynoynIauxoLmVNKWz8WQ8owm1HMvIZ9tVeCoA9wk+qSuUtgKCvPBEcE2WQKwzK5lBRq4llkQYpQJe",
	"ljuOkJFWmH5MznzcNk3C74v4OyO5cQTBo9RFwDIMhIj6PKMpPQaMh3mz3jogZFWAscfPg2ZpnUTOO4uc",
	"U8LIOa319n80kq1MBjRFV0OQEE3pVQ1uTZOORN+VdHBVSwdZF9yaJMpM14qmn3tm3FahF09z60XI347c",
	"iPqLyaTTMuhIALe2kiKCwi59OOdtr4Un2zn6f9DSuxj6WgjwPq8rsiUj7DtoG9sNnusVr2QWqCQrXtUQ",
	"54+vleJuTVP6q9SZb51ClmuyhTSoJwDXiu0ibGqFx25l1jyovmNAYnRrvZBPoidx+O7J5qPu5v0/Qvfx",
	"GflsAP+V2vcv64E2Ompk1hY/+J7FoxG1QZKbWmf3RNFncUALex6P5gwD6s6bkfSHffnI3dxc7OqNRXvG",
	"L5JvXjmh1vivDdbN+Ipuet6E3fPBm3Csb22DJ6jhf+aIPsKD8+oT4HPGFdsM/SigQXLPbMYRCNcEbmS8",
	"64gFDCXm+9PrrM224e17KPK/1MZiQBuLR++b+Tvi69AW9KfbbuwnwP4IClGH+1F/hnztdx7cCGhf74pi",
	"mL0hWYRt4FYdWXcfgCljlRG8Ko3HdDaZTGiTfG19SpuL5q8AAAD//9D5nSKtDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

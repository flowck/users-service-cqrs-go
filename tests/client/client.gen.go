// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for GetUsersByStatusParamsStatus.
const (
	Blocked   GetUsersByStatusParamsStatus = "blocked"
	Unblocked GetUsersByStatusParamsStatus = "unblocked"
)

// GenericResponse defines model for GenericResponse.
type GenericResponse struct {
	Message *string `json:"message,omitempty"`
}

// User defines model for User.
type User struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"firstName,omitempty"`
	Id        *openapi_types.UUID  `json:"id,omitempty"`
	LastName  *string              `json:"lastName,omitempty"`

	// Status User Status
	Status *string `json:"status,omitempty"`
}

// UserList defines model for UserList.
type UserList = []User

// GetUsersByStatusParams defines parameters for GetUsersByStatus.
type GetUsersByStatusParams struct {
	// Status User status "blocked" / "unblocked"
	Status GetUsersByStatusParamsStatus `form:"status" json:"status"`
}

// GetUsersByStatusParamsStatus defines parameters for GetUsersByStatus.
type GetUsersByStatusParamsStatus string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUsersByStatus request
	GetUsersByStatus(ctx context.Context, params *GetUsersByStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlockUser request
	BlockUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnblockUser request
	UnblockUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUsersByStatus(ctx context.Context, params *GetUsersByStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersByStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlockUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlockUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnblockUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnblockUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUsersByStatusRequest generates requests for GetUsersByStatus
func NewGetUsersByStatusRequest(server string, params *GetUsersByStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlockUserRequest generates requests for BlockUser
func NewBlockUserRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/block", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnblockUserRequest generates requests for UnblockUser
func NewUnblockUserRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/unblock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUsersByStatus request
	GetUsersByStatusWithResponse(ctx context.Context, params *GetUsersByStatusParams, reqEditors ...RequestEditorFn) (*GetUsersByStatusResponse, error)

	// BlockUser request
	BlockUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BlockUserResponse, error)

	// UnblockUser request
	UnblockUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnblockUserResponse, error)
}

type GetUsersByStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserList
}

// Status returns HTTPResponse.Status
func (r GetUsersByStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersByStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericResponse
	JSON400      *GenericResponse
}

// Status returns HTTPResponse.Status
func (r BlockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnblockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericResponse
}

// Status returns HTTPResponse.Status
func (r UnblockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnblockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUsersByStatusWithResponse request returning *GetUsersByStatusResponse
func (c *ClientWithResponses) GetUsersByStatusWithResponse(ctx context.Context, params *GetUsersByStatusParams, reqEditors ...RequestEditorFn) (*GetUsersByStatusResponse, error) {
	rsp, err := c.GetUsersByStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersByStatusResponse(rsp)
}

// BlockUserWithResponse request returning *BlockUserResponse
func (c *ClientWithResponses) BlockUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BlockUserResponse, error) {
	rsp, err := c.BlockUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlockUserResponse(rsp)
}

// UnblockUserWithResponse request returning *UnblockUserResponse
func (c *ClientWithResponses) UnblockUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnblockUserResponse, error) {
	rsp, err := c.UnblockUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnblockUserResponse(rsp)
}

// ParseGetUsersByStatusResponse parses an HTTP response from a GetUsersByStatusWithResponse call
func ParseGetUsersByStatusResponse(rsp *http.Response) (*GetUsersByStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersByStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBlockUserResponse parses an HTTP response from a BlockUserWithResponse call
func ParseBlockUserResponse(rsp *http.Response) (*BlockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUnblockUserResponse parses an HTTP response from a UnblockUserWithResponse call
func ParseUnblockUserResponse(rsp *http.Response) (*UnblockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnblockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVS3PbNhD+Kxi0R4qQIilpeUoTuxl14jS16l5iHyBwScIhHgaWsjUe/fcOQFKWLObh",
	"dsa5aChy8e3iewD3VBhljQaNnmb31IsKFI+P70CDk+IcvDXaQ3hlnbHgUEIsUOA9L+MH3FigGfXopC7p",
	"dpv0b8zqGgTSbUIvPLhjDFBc1vHhjitbhyXXptKv4/tUGEUTWhinONKsK04ed0toIZ3HD1zBIRJWELsO",
	"rJD5YemrVy+LKcz5aDUXYjQDmI34+JfJiE8nc3gJMz7/dbI/StPIfAi35kOD/GEqPVTtkWMTecjBCyct",
	"SqNpFrkiy/Zjsoezqo34DAONv0T4e+kxwEsEFfv87KCgGf2JPcjOOs1Z5OoBiTvHN3QbsOEOwWlenxgx",
	"MG2FaH3GWCmxalZBNFbU5lZ8Zo0H50ce3FoKGIkb50elYeenv52cnaYq7KNx9dMRooC6MGEUYTRygXte",
	"Cm5QUptUVFyXXMvX5c5M2+TR7G//Ol+SHJQhMnCsQCMPn4gpCCddX4KGKK55CSTOk9KE1lJAlwod9aZn",
	"i7//64bY+8Xb0w/LyEkQAJzyfxbLtqiDyxjzt7wswaXSsFjCghEkRmsE8Xy/IqFrcL7d4Tgdp5OAaixo",
	"biXN6DQdp1OaUMuxinq2U4WnEvBY4LOmRmlrIMhLTwTXZAXEOrOWOeTkVmJFhFEq8GW54wg5aY3pU3Lh",
	"47JJEn5fxN8pKYwjCB6lLgOX4UCIrC9ymtF3gHEzbza7BARUBRhn/DQYljZJ5LKPyCUljFzSRu/+xyDZ",
	"2uRAM3QNBAvRjN404DY06UX0fUsHN410kPfFbUiizXSjaPZpL4y7LvTq+9J6FfDbYzWy/mI87r0MOgrA",
	"ra2liKSwax/2eb83wnfHOeZ/MNKHHPpGCPC+aGqyEyOsm7WDHRYv9JrXMg9SkjWvG4jnj2+U4m5DM/q7",
	"1Llvk0JWG7KjNLgnENea7Sosao3H7mW+ZZGueEMcqh1lClZ9UCmevV9W6BundKDfGv81o3d2irt7muOP",
	"7PwmbKu7hv6X6F/T+vFd/XSJn2uM3jz7DA/65yPgk+zThTAaaFDcC5tzBMI1gTsZzx5iAUOLRX6k2kWL",
	"1un2HI78kd5YDnhj+c38L06Ib8JYkLe1s+Paj4BEGySFaXRXNT+u+ifgtfcu3AloXx+aYli9IVuEZeDW",
	"vVgPF3LGWG0EryvjMZuOx2O6vdr+GwAA//92M/l6AQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
